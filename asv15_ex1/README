K-edge-coloring:
In SAT terms, it means we must create boolean formulas to satisfy the coloring requirements.
We are representing our coloring using 3-variable tuples: (v1, v2, c), where (v1, v2) is the edge and c is the
chosen color.

Each edge in E (v1, v2) must have at least one color
Each edge in E (v1, v2) must have at most one color
Neighbor edges do not have the same color. Meaning: for each node V and color C, the list of edges that cover
 V can have at most one of (e, c) that is TRUE.

Translation of a boolean formula for "at most one is true" requires breaking down this list to pairs, making
 sure that each pair does not have the same color

planning:
In SMT terms, we formulate the problem using predicates and constrains.
at(package p, city c, time t) --> BOOL - predicate that means package p is at city c in time t
on(package p, airplane a, time t) --> BOOL - predicate that means package p is loaded on airplane a in time t
loc(airplane a, time t) --> city c - function that returns airplane a location in time t
ForAll(airplane a) ForAll(time t) or(Exists(city c')and(loc(a, t)=c',ForAll(city c) implies(loc(a,t)=c, c=c')) ,move(a,t))
ForAll(airplane a) ForAll(time t) implies(move(a,t), ForAll(city c) not loc(a,t)=c)
move(airplane a, time t) := loc(a, t) != loc(a, t+1)
load(package p, airplane a, time t) := !move(a, t) and At(p,loc(a,t),t)
unload(package p, city c, airplane a, time t) := !move(a, t) and on(p,a,t) and loc(a, t) = c
(can we get rid of the airplane parameter for "unload"? we could add a constraint for checking
if the airplane carrying package p is at the city, but we need to understand what would be easier
to write)

We will need the following constraints:
A package cannot be both on an airplane and in a city at the same time. Meaning:
for all time t
  for all package p
    (exists city c'
      at(p, c', t)
      and
      for all city c
        c = c' or not at(p, c, t))
      and
      for all airplane a
        not on(p, a, t)
    or
    (exists airplane a'
      on(p, a', t)
      and
      for all airplane a
        a = a' or not on(p, a, t))
      and
      for all city c
        not at(p, c, t)

All packages start at their source cities, all packages end at their destination cities
for all p
  at(p, src(p), 0)

Package can only move when it's loaded on an airplane
for all time t
  for all packages p
    Xor(
      at(p, c, t) and at(p, c, t + 1),
      Exists aps so that at(p, c, t) and load(p, a, t + 1)
    )

Package cannot be in more than one city
For any time t
  For any package p
    Exists c' so that at(p, c', t) implies that for all c if c != c' then Not(at(p, c, t)
    Exists a' so that on(p, a', t) implies that for all a if a != a' then Not(on(p, a, t)

Package cannot be on more than one plane
Airplane cannot be in more than one city

itayp: Looks like an overkill - we should start with small t_max and increment it, so the
 condition could be:
for all p
  at(p, dst(p), t_max)

exists t'
  for all p
    at(p, dst(p), t')
    and
    for all t (t<t') not for all p at(p, dst(p), t)
